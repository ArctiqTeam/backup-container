#!/bin/bash
# =================================================================================================================
# Mongo Backup and Restore Functions:
# - Dynamically loaded as a plug-in
# -----------------------------------------------------------------------------------------------------------------
function onBackupDatabase(){
  (
    _databaseSpec=${1}
    _backupFile=${2}

    _hostname=$(getHostname ${_databaseSpec})
    _database=$(getDatabaseName ${_databaseSpec})
    _port=$(getPort ${_databaseSpec})
    _port=${_port:+"--port ${_port}"}
    _username=$(getUsername ${_databaseSpec})
    _password=$(getPassword ${_databaseSpec})

    echoGreen "Starting Mongo backup using mongodump ..."
    mongodump --authenticationDatabase="${MONGODB_AUTHENTICATION_DATABASE}" -h "${_hostname}" -u "${_username}" -p "${_password}" "${_port}" -d "${_database}" --quiet --gzip --archive=${_backupFile}
    return ${?}
  )
}

function onRestoreDatabase(){
  (
    local OPTIND
    local quiet
    local localhost
    local localhost
    unset quiet
    unset localhost
    unset flags
    while getopts ql FLAG; do
      case $FLAG in
        q ) 
          quiet=1
          flags+="-${FLAG} "
          ;;
        * ) flags+="-${FLAG} ";;
      esac
    done
    shift $((OPTIND-1))

    _databaseSpec=${1}
    _fileName=${2}
    _adminPassword=${3}

    _hostname=$(getHostname ${flags} ${_databaseSpec})
    _database=$(getDatabaseName ${_databaseSpec})
    _port=$(getPort ${flags} ${_databaseSpec})
    _port=${_port:+"--port ${_port}"}
    _username=$(getUsername ${_databaseSpec})
    _password=$(getPassword ${_databaseSpec})

    # drop database
    echo "Restoring from backup ..."
    mongorestore --drop -u "${_username}" -p "${DATABASE_PASSWORD}" "${_port}" --authenticationDatabase="${MONGODB_AUTHENTICATION_DATABASE}" -d "${_database}" --quiet --gzip --archive=${_fileName} --nsInclude="sbc*"
    return ${?}
  )
}

function onStartServer(){
  (
    _databaseSpec=${1}

    #echo "Mongo DB using default port 27017"
    MONGODB_ADMIN_PASSWORD="${DATABASE_PASSWORD}" /usr/bin/run-mongod >/dev/null 2>&1 &
  )
}

function onStopServer(){
  (
    _databaseSpec=${1}

    _port=$(getPort ${_databaseSpec})
    _port=${_port:+"--port ${_port}"}
    _username=$(getUsername ${_databaseSpec})
    _password=$(getPassword ${_databaseSpec})

    echo "shutting down..."
    mongo admin --authenticationDatabase "${MONGODB_AUTHENTICATION_DATABASE}" -u "${_username}" -p "${_password}" "${_port}" --eval "db.shutdownServer()"
    sleep 30

    # Delete the database files and configuration
    echo -e "Cleaning up ...\n" >&2
    rm -rf /var/lib/mongodb/data/*
  )
}

function onPingDbServer(){
  (
    local OPTIND
    local localhost
    unset localhost
    while getopts l FLAG; do
      case $FLAG in
        * ) flags+="-${FLAG} " ;;
      esac
    done
    shift $((OPTIND-1))

    _databaseSpec=${1}

    _hostname=$(getHostname ${flags} ${_databaseSpec})
    _database=$(getDatabaseName ${_databaseSpec})
    _port=$(getPort ${flags} ${_databaseSpec})
    _port=${_port:+"--port ${_port}"}
    _username=$(getUsername ${_databaseSpec})
    _password=$(getPassword ${_databaseSpec})

    if mongo --host "${_hostname}" --authenticationDatabase "${MONGODB_AUTHENTICATION_DATABASE}" -u "${_username}" -p "${_password}" "${_port}" --quiet --eval 'db.runCommand({ connectionStatus: 1 })' >/dev/null 2>&1; then
      return 0
    else
      return 1
    fi
  )
}

function onVerifyBackup(){
  (
    _databaseSpec=${1}

    _hostname=$(getHostname -l ${_databaseSpec})
    _database=$(getDatabaseName ${_databaseSpec})
    _port=$(getPort -l ${_databaseSpec})
    _port=${_port:+"--port ${_port}"}
    _username=$(getUsername ${_databaseSpec})
    _password=$(getPassword ${_databaseSpec})

    collections=$(mongo ${_hostname}/${_database} --authenticationDatabase "${MONGODB_AUTHENTICATION_DATABASE}" -u "${_username}" -p "${_password}" "${_port}" --quiet --eval 'var dbs = [];dbs = db.getCollectionNames();for (i in dbs){ print(db.dbs[i]);}';)
    rtnCd=${?}

    if (( ${rtnCd} == 0 )); then    
      numResults=$(echo "${collections}"| wc -l)
      if [[ ! -z "${collections}" ]] && (( numResults >= 1 )); then
        # All good
        verificationLog="\nThe restored database contained ${numResults} collections, and is ${size} in size."
      else
        # Not so good
        verificationLog="\nNo collections were found in the restored database ${_database}."
        rtnCd="3"
      fi
    fi

    echo ${verificationLog}
    return ${rtnCd}
  )
}

function onGetDbSize(){
  (
    local OPTIND
    local localhost
    unset localhost
    while getopts l FLAG; do
      case $FLAG in
        * ) flags+="-${FLAG} " ;;
      esac
    done
    shift $((OPTIND-1))

    _databaseSpec=${1}

    _hostname=$(getHostname ${flags} ${_databaseSpec})
    _database=$(getDatabaseName ${_databaseSpec})
    _port=$(getPort ${flags} ${_databaseSpec})
    _port=${_port:+"--port ${_port}"}
    _username=$(getUsername ${_databaseSpec})
    _password=$(getPassword ${_databaseSpec})
    
    size=$(mongo ${_hostname}/${_database} --authenticationDatabase "${MONGODB_AUTHENTICATION_DATABASE}" -u "${_username}" -p "${_password}" "${_port}" --quiet --eval 'printjson(db.stats().fsTotalSize)')
    rtnCd=${?}

    echo "${size}"
    return ${rtnCd}
  )
}
# =================================================================================================================
